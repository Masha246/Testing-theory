
Что такое функциональное тестирование (Functional/Behavioral testing)?

Функциональное тестирование это способ определить, работает ли программное обеспечение или приложение так, как ожидается.
Что такое нефункциональное тестирование (Non-Functional testing)?


Нефункциональное тестирование — это проверка нефункциональных атрибутов приложения, таких как производительность, надежность и удобство использования
Какие виды тестирования относятся к функциональному тестированию?




К функциональному относятся:
Модульное тестирование (юнит)
Интеграционное тестирование
Системное тестирование
Приемочное тестирование
регрессионное тестирование
санитарное
smoke-тестирование
исследовательское
белого, черного, серого ящика
альфа, бета
Какие виды тестирования относятся к нефункциональному тестированию?
К нефункциональному относятся:
стрессовое
объемное
удобства сопровождения
безопасности
масштабируемости
совместимости
юзабельности
стабильности
нагрузочное
Что такое Статическое/Динамическое тестирование?
Статическое тестирование — это процесс анализа программного кода, документации и других артефактов разработки без выполнения кода. Целью статического тестирования является выявление ошибок на ранних стадиях разработки, что позволяет сэкономить время и ресурсы.
Динамическое тестирование — это процесс проверки программного обеспечения путем его выполнения. Целью динамического тестирования является выявление ошибок в рабочем программном обеспечении и проверка его функциональности.
Что такое Черный/Серый/Белый ящик тестирования(White/Black/Grey Box testing)?
Черный ящик -это процесс тестирования системы и её поведения вне зависимости от её внутренней структуры, архитектуры и реализации. Это функциональное и нефункциональное тестирование без доступа к внутренней структуре компонентов системы. 
Белый ящик - способ проверки ПО, который концентрируется на внутренней системе и коде программы. Тестирование “белого ящика” в программной инженерии может включать тестирование кода и внутреннего дизайна программного обеспечения для проверки потока ввода-вывода и проверки дизайна, удобства использования и безопасности программного обеспечения.
Серый ящик - это метод тестирования программного обеспечения, позволяющий протестировать программный продукт или приложение с частичным знанием внутренней структуры приложения.
Что такое Компонентное(Component or Unit Testing) /Интеграционное (Integration Testing)
Компонентное или Модульное тестирование (Component or Unit Testing) проверяет функциональность и ищет дефекты в частях приложения, которые доступны и могут быть протестированы по-отдельности (модули программ, объекты, классы, функции и т. д.).
Интеграционное тестирование – это тип тестирования, при котором программные модули объединяются логически и тестируются как группа. Стратегии интеграционного тестирования:
Подход Большого взрыва.(все компоненты собираются вместе, а затем тестируются.)
Инкрементальный подход (тестирование выполняется путем объединения двух или более логически связанных модулей. Затем добавляются другие связанные модули и проверяются на правильность функционирования.)
Нисходящий подход (сверху вниз). (выполняется сверху вниз, следуя потоку управления программной системы. )
Подход «снизу вверх» (каждый модуль на более низких уровнях тестируется с модулями более высоких уровней, пока не будут протестированы все модули)
Сэндвич – комбинация «сверху вниз» и «снизу вверх». (Здесь верхнеуровневые модули тестируются с нижнеуровневыми, а нижнеуровневые модули интегрируются с верхнеуровневыми, соответственно, и тестируются. )
Системное (System Testing)/Приемочное тестирования (Acceptance Testing)?
Системное тестирование -  это этап тестирования программного обеспечения, на котором тестируется полный и полностью интегрированный программный продукт на основе спецификации программного обеспечения. Основная цель такого тестирования — это процесс оценки, который охватывает аспекты, связанные с бизнесом, функциональной спецификой и потребительскими ожиданиями. 
Приемочное тестирование - система проверяется на соответствие техническим и бизнес требованиям. Основная цель этого теста — оценить качество продукта и установить, можно ли делать релиз или нет.
Что такое Позитивное/Негативное тестирование?
Позитивное тестирование - это тестирование с применением сценариев, которые соответствуют нормальному (штатному, ожидаемому) поведению системы. С его помощью мы можем определить, что система делает то, для чего и была создана.
Негативное - тестирование, в рамках которого применяются сценарии, которые соответствуют внештатному поведению тестируемой системы. Это могут быть исключительные ситуации или неверные данные.
Что такое Альфа (Alpha Testing)/Бета тестирование(Beta Testing)?
Альфа-тестирование обычно проводят внутри компании или ограниченной группы людей, чтобы результаты могли быть контролируемыми и конфиденциальными. 
Бета-тестирование - продукт проверяют реальные пользователи перед его окончательным выпуском на рынок.
Что такое Интуитивное/Исследовательское тестирование?
Интуитивное тестирование - выполняется без подготовки к тестам, без определения ожидаемых результатов, проектирования тестовых сценариев. Не требует никакой документации, планирования, процессов которых следует придерживаться в выполнении. Также на данный вид тестирования не пишутся тест-кейсы, что в свою очередь может вызвать определенные затруднения в попытках воспроизвести дефект в системе.
Исследовательское тестирование - это одновременное изучение программного продукта, проектирование тестов и их исполнение.
Что такое Gorilla testing/ Monkey testing?


Gorilla testing - выбирается каждый модуль продукта, и в него случайным образом подаются действительные и недействительные входные данные до тех пор, пока модуль не выйдет из строя.
Monkey - это метод тестирования при разработке программного обеспечения, при котором QA инженер предоставляет приложению случайные входные данные без использования каких-либо тестовых примеров, которые могут привести к сбою системы. 
Что такое Дымовые (Smoke)/Ре-тест (Re-test)/ Санити (Sanity)/Регрессионное (Regression) тестирование?
Дымовое тестирование - минимальный набор тестов на явные ошибки, прохождение которых показывает, что продукт готов к дальнейшему тестированию.
Ре-тест перепроверяет и подтверждает факт того, что ранее заваленные тест-кейсы проходят после того, как дефекты исправлены
Санитарное тестирование - это узконаправленное тестирование достаточное для доказательства того, что конкретная функция работает согласно заявленным в спецификации требованиям. Является подмножеством регрессионного тестирования. Используется для определения работоспособности определенной части приложения после изменений произведенных в ней или окружающей среде. В отличии от дымового (Smoke testing), санитарное тестирование (Sanity testing) направлено вглубь проверяемой функции, в то время как дымовое направлено вширь, для покрытия тестами как можно большего функционала в кратчайшие сроки.
Регрессионное тестирование — это процесс тестирования программного продукта после внесения изменений, чтобы убедиться, что в результате изменений не появилось новых ошибок. Используется для подтверждения того, что самые последние изменения, связанные с программой или кодом, не повлияли неблагоприятным образом на существующие функции. В ходе регрессионного тестирования определяется, что программное обеспечение или приложение работают нормально в отношении новых изменений и исправлений ошибок.
Что такое Тестирование нового функционала/ Приемочное тестирование?
Тестирование нового функционала – процесс проверки нового, добавляемого функционала ПО на соответствие предъявляемым к нему требованиям.
Приемочное тестирование — система проверяется на приемлемость — готовность к передаче заказчику (клиентам). Оценивается соответствие продукта бизнес-требованиям и требованиям пользователей. Это проверка соответствия требованиям пользователей и бизнес-требованиям, проверка соответствия критериям приемки. После завершения приемочного тестирования пользователи/заказчики решают, принимать ли систему в пользование.
Что такое Ручное/Автоматизированное/Полуавтоматизированное тестирование?
Ручное тестирование — это процесс поиска ошибок в программе без использования специальных ПО, силами человека. 
Автоматизированное - метод тестирования программного обеспечения, который выполняется с использованием специальных программных средств, которые в свою очередь необходимы для выполнения набора тестовых примеров. 
Полуавтоматизированное тестирование - это ручное тестирование с частичным использованием средств автоматизации (например автоматизация развертки окружения, автоматизация подготовки предусловий и т. д.)
На основании чего происходит разработка тестовых сценариев?
Разработка тестовых сценариев происходит  на основании общих целей тестирования, определенных во время планирования. Тестовый сценарий – документ, определяющий установленную последовательность действий при выполнении тестирования.
Что такое Frontend / Backend?

Фронтенд — это разработка пользовательских функций и интерфейса. К ним относится всё, что пользователи видят на сайте или в приложении, и с чем можно взаимодействовать: картинки, выпадающие списки, меню, анимация, карточки товаров, кнопки, чекбоксы, интерактивные элементы.
Бэкенд — это логика работы сайта, скрытая от пользователя. Именно там происходит то, что можно назвать работой сайта.
Что такое тестирование безопасности?
Тестирование безопасности-тестирование с целью оценить защищенность программного продукта. (ISTQB). Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компании, сотрудников или клиентов.
Принципы тестирования  безопасности
Конфиденциальность означает, что конфиденциальная информация должна быть защищена от несанкционированного доступа. Этот принцип обеспечивает защиту личных данных, коммерческой информации, государственных секретов и других конфиденциальных данных от несанкционированного доступа.
Целостность означает, что данные должны быть защищены от изменения несанкционированными лицами. Этот принцип гарантирует, что информация, которая передается и хранится, не будет изменена, повреждена или уничтожена.
Доступность означает, что информация должна быть доступна только тем, кто имеет на это право. Этот принцип гарантирует, что информация доступна и используется только теми, кто имеет право на ее использование, и что она не будет заблокирована или недоступна из-за непредвиденных событий или действий злоумышленников.
Виды уязвимостей
Инъекции — это уязвимости, связанные с возможностью внедрения зловредного кода в приложение через входные данные, такие как поля форм, URL-адреса, файлы и т.д. Наиболее распространенные типы инъекций: SQL-инъекции, XSS-атаки, инъекции операционной системы и командной строки.
Недостаточная авторизация и аутентификация — это уязвимости, связанные с отсутствием или недостаточной проверкой подлинности пользователей, что может привести к несанкционированному доступу к системе, краже учетных данных и т.д.
Утечки информации — это уязвимости, связанные с некорректным хранением или передачей конфиденциальной информации. Это может привести к несанкционированному доступу к конфиденциальным данным, включая пароли, логины, персональные данные. 
Недостатки в защите приложения — это уязвимости, связанные с недостаточной защитой приложения от внешних атак, таких как DDoS-атаки, переполнение буфера, уязвимости в системе контроля доступа и т.д.
Уязвимости в софте третьих сторон — это уязвимости, связанные с использованием приложением стороннего кода, который может содержать уязвимости, такие как небезопасные библиотеки и фреймворки, открытые порты, уязвимости в настройках и т.д.
Что такое Тестирование на отказ и восстановления Failover and Recovery Testing?
Тестирование на отказ и восстановление (Failover and Recovery Testing) – проверяет тестируемый продукт с точки зрения способности противостоять и успешно восстанавливаться после возможных сбоев, возникших в связи с ошибками программного обеспечения, отказами оборудования или проблемами связи (например, отказ сети).
Что такое тестирование Эффективности использования ресурсов?
Тестирование эффективности использования ресурсов — это процесс проверки программного обеспечения на предмет того, как оно использует системные ресурсы, такие как процессор, память, дисковое пространство и сетевую пропускную способность.
Что такое тестирование Масштабируемости (Scalability testing)?
Тестирование масштабируемости – это тип нефункционального тестирования, определяющее, как приложение адаптируется к изменениям количества пользовательских запросов. 
Что такое тестирование Производительности (Performance testing)/Load testing/Stress testing/Volume testing?
Тестирование производительности программного обеспечения — тестирование, которое проводится с целью определения, как быстро работает вычислительная система или её часть под определённой нагрузкой. Это вид тестирования программного обеспечения, используемый для проверки скорости, времени отклика, стабильности, надежности, масштабируемости и использования ресурсов программного приложения при определенной рабочей нагрузке, обычно регрессионным образом, когда в приложение ежедневно или еженедельно вносятся небольшие изменения.
Нагрузочное тестирование (load testing) -  вид тестирования производительности, проводимый с целью оценить поведение компонента или системы под увеличивающейся нагрузкой (число одновременно работающих пользователей и/или число транзакций) для определения максимально допустимого уровня нагрузки для исследуемого компонента или системы.
Стрессовое тестирование (stress testing) - вид тестирования производительности, оценивающий систему или компонент на граничных значениях рабочих нагрузок или за их пределами, или же в состоянии ограниченных ресурсов, таких как память или доступ к серверу. Стресс-тестирование - это отрицательное / негативное тестирование, которые проводят при больших нагрузках или нагрузках, выходящих за допустимые пределы, чтобы определить поведение системы при таких обстоятельствах, точку отказа системы (числовые показатели метрик), показываются ли корректные ошибки при этом и не теряются ли данные.
Объемное тестирование (volume testing) - тип тестирования уровня производительности, проводимого для оценки способности элемента тестирования обработать определенные объемы данных (обычно равных или близких к максимальным указанным потенциальным возможностям) с точки зрения потенциальных возможностей пропускной способности, емкости памяти или того и другого.
Что такое тестирование Надежности(Reliability Testing)?
Тестирование надежности (reliability) - способность программного продукта функционировать при заданных условиях на протяжении определенного периода времени, или для определенного количества операций. 
Что такое тестирование Стабильности (Stability Testing)?
Тестирование на выносливость оно же Stability Testing включает в себя тестирование системы со значительной нагрузкой в ​​течение длительного периода времени, чтобы выяснить, как система ведет себя при длительном использовании. То есть для обеспечения того, чтобы производительность и / или время отклика после некоторого длительного периода устойчивой активности были не хуже, чем в начале теста. В основном используется для проверки утечек памяти, времени отклика, правильности подключения и закрытия подключения к модулям (например, БД) и т.п.
Что такое тестирование Удобства использования(Usability testing)?
Юзабилити-тестирование предназначено для определения того, насколько программный продукт понятен, легок в освоении, прост в эксплуатации и привлекателен для пользователей при определенных условиях и требованиях. 
Что такое тестирование Pixel Perfect? Какие инструментами можно пользоваться при тестировании Pixel Perfect?
В Pixel Perfect UI Testing создается подробный план тестирования, который определяет область действия, цели, ресурсы и сроки . Этот план служит руководством для выполнения тестов с точностью и порядком, обеспечивая систематический подход к достижению безупречного совершенства пользовательского интерфейса. Для техники точной вёрстки нужно скачать специальные плагины. Они позволят наложить полупрозрачный макет страницы поверх HTML-шаблона и найти несоответствия.
Что такое тестирование Локализации// Совместимости/ Адаптивности?
Тестирование локализации — это процесс проверки работы продукта в условиях конкретной локали (языка, региона, культуры), чтобы обеспечить его корректное функционирование и соответствие требованиям пользователей. Основные задачи тестирования локализации включают:
проверка правильности перевода текста
проверка соответствия форматов даты, времени, чисел и валюты
проверка корректности работы с разными кодировками и шрифтами
проверка адаптации пользовательского интерфейса
Тестирование на совместимость (compatibility testing) — это тип тестирования, призванный обеспечить корректную работу и взаимодействие программных приложений с разными типами оборудования, операционными системами, веб и мобильными браузерами, сетями и другими программными элементами.
Тестирование адаптивности помогает убедиться, что приложение или веб-сайт выглядит и функционирует должным образом на различных устройствах и экранах.
Примеры проблем адаптивности: Элементы интерфейса слишком близко расположены друг к другу, что затрудняет нажатие на них на сенсорных экранах; текст слишком мелкий или нечитабельный на некоторых разрешениях экрана; изображения и видео не масштабируются корректно на разных экранах; сайт или приложение некорректно отображается в разных ориентациях экрана (портретная и ландшафтная).
Что такое тестирование установки (Installation Testing)? 
Тестирование установки (инсталляционное тестирование) позволяет удостовериться в том, что ПО корректно устанавливается и настраивается, накат новых версий происходит без ошибок, а также есть возможность деинсталлировать и удалить данное ПО.
Что такое ETL-тестирование/Тестирование перед миграцией (Pre-Migration testing)/Миграционное тестирование (Migration testing)/Тестирование после миграции (Post-Migration testing)?
ETL-тестирование — это набор процедур, используемых для оценки и подтверждения процесса интеграции данных в среде хранилища данных. Это способ убедиться, что данные из ваших исходных систем извлечены, преобразованы и загружены в целевое хранилище в соответствии с требованиями ваших бизнес-правил.ETL-тестирование – это тип тестирования обработки данных, который проверяет, что данные, полученные из одного источника, были точно переданы в место назначения. 
Тестирование перед миграцией (Pre-Migration testing) - Эти тесты проводятся на ранних стадиях процесса миграции, до завершения любой миграции. 
Тестирование миграции данных выполняется для того, чтобы проверить, насколько качественно перенесена информация, является ли она точной и соответствует правилам преобразования. Данные должны тщательно проверяться в процессе всей миграции данных из одного места в другое.
Постмиграционное - тестировщики выполняют определенные тестовые наборы, тестовые сценарии, варианты использования с устаревшими данными, а также с новым набором данных. В дополнение к этому, есть определенные элементы, которые необходимо проверить в перенесенных средах:
Все устаревшие данные перенесены в новое приложение в течение запланированного времени простоя. Чтобы убедиться в этом, сравните количество записей между устаревшим и новым приложением для каждой таблицы и представлений в базе данных;
Все изменения схемы (поля и таблицы добавлены или удалены) в соответствии с новой системой обновлены;
Данные, перенесенные из устаревшего приложения в новое, должны сохранять свое значение и формат, если только это не указано отдельно. Чтобы убедиться в этом, сравните значения данных между устаревшей и новой базами данных приложения;
Перенесенные данные в новом приложении. Охватите здесь максимальное количество возможных причин. Для обеспечения 100% охвата проверки переноса данных используйте инструмент автоматизированного тестирования ;
Ранее поддерживаемые функции в устаревшей системе работают должным образом в новой системе;
Поток данных в приложении, который охватывает большинство компонентов;
Избыточность устаревших данных. Никакие устаревшие данные не должны дублироваться во время миграции;
Случаи несоответствия данных, такие как изменение типа данных, изменение формата хранения и т. д.;
Любое добавление данных в новое приложение не должно отражаться на устаревшем;
Обновление данных устаревшего приложения через новое приложение должно поддерживаться. После обновления в новом приложении оно не должно отражаться на устаревшем;
Удаление данных устаревшего приложения в новом приложении должно поддерживаться. После удаления в новом приложении оно также не должно удалять данные в устаревшем;





[A[A[A[A[A[A[C[C[.
