Что такое Ошибка/Дефект/Отказ?


Ошибка — согласно ISTQB, любое действие человека, которое вызвало неверный результат. Ошибки могут быть допущены разработчиками, тестировщиками или пользователями. Ошибки могут вызвать дефекты, если они не будут обнаружены и исправлены.
Дефект (баг) — изъян в компоненте или системе, который может привести компонент или систему к невозможности выполнить требуемую функцию (ISTQB). Это несоответствие между ожидаемым результатом и фактическим поведением системы. Дефект может быть вызван ошибкой в коде, неправильной конфигурацией системы или другими факторами. Дефекты могут привести к сбоям и отказам, если их не обнаружить и не исправить.
Отказ — (определение с ISTQB) – событие, при котором система не выполняет ожидаемую функцию. Это постоянное нарушение работы системы, которое делает её непригодной для использования. Отказы могут быть вызваны серьезными дефектами или ошибками, которые не были обнаружены и исправлены. Отказы требуют серьезного вмешательства для восстановления работоспособности системы.

Основные типы багов:

Функциональный (Functional Bug) — баг, связанный с неправильной работой функциональности программы.
Нефункциональный (Non-functional Bug) — баг, связанный с аспектами производительности, надежности, безопасности и т.д. программы.
Интерфейсный (Interface Bug) — баг, связанный с интерфейсом пользователя.
Синтаксический (Syntax Bug) — баг, связанный с нарушением правил синтаксиса языка программирования.
Логический (Logical Bug) — баг, связанный с неправильной логикой работы программы.
Спецификационный (Specification Bug) — баг, связанный с нарушением требований к программе, указанных в спецификации.
Визуальный (Visual Bug) — баг, связанный с отображением графических элементов программы.
Локализационный (Localization Bug) — баг, связанный с неправильным отображением или переводом программы на другие языки.
Хитрые баги:
Гейзенбаг — баг, который меняет свое поведение в зависимости от условий, исследования или тестового окружения, похож на эффект наблюдателя в физике.
Борбаг — баг, который не может быть объяснен классической теорией  тестирования, и требует применения квантовой теории тестирования, аналог квантовой механики в физике.
Шредингбаг — существует и не существует одновременно. Как и кот Шрёдингера в его знаменитом эксперименте, где кот одновременно жив и мертв, пока его не наблюдают.
Мандельбаг-характеризуются чрезвычайно сложным (с точки зрения обычного тестировщика), или непредсказуемым поведением, чаще всего вызванным глубокими архитектурными дефектами системы.
Лунный баг - достаточно редкие ошибки, которые проявляются строго в определенное время, вызывая сбои в участках кода, зависящих от временнЫх параметров.
Статистические баги - не обнаруживаются при однократном прогоне, но проявляются при многократном выполнении кода, который предназначен для получения случайных (псевдослучайных) результатов.
Гинденбаг - такой тип багов характеризуется не сложностью обнаружения, не «хитростью», как предыдущие баги, а реально катастрофическими последствиями, особенно если речь идет о критически важной инфраструктуре, или убытках на миллиарды долларов.
Баг Хиггса - специфический тип бага, существование которого предсказано, или предвидится, или он даже был обнаружен, по единичным сообщениям пользователей, но на практике ни тестировщику, ни разработчику обнаружить его не удается — и все работает идеально. 
Blocker bug:  приложение для онлайн покупок не позволяет пользователю добавить товар в корзину и оформить заказ. результат-пользователи не могут использовать данный сервис.
Critical bug: в банковском приложении можно получить доступ к личным данным и финансовой информации других пользователей.
Major bug: в игре персонаж пользователя теряет все сохраненные данные и прогресс игры
Minor bug: на странице с контактной информацией неактивна кнопка “Связаться с нами”
Trivial bug: заголовок на странице не выровнен по центру, а сдвинут влево.
Локализация дефекта — процесс, направленный на анализ проблемы, с целью максимально‑возможной детализации причины ее возникновения. Основные цели: снижение рисков, обеспечение качества, оптимизация процесса тестирования, повышение эффективности отладки.
Методы локализации в клиентской части:
тестирование на разных устройствах/браузерах
Инспектирование DOM: Визуальный анализ структуры страницы через инспектор в браузере для поиска проблем с версткой, CSS и взаимодействиями элементов.
Логи браузера/консоль разработчика: Проверка ошибок и предупреждений в консоли разработчика в браузере (F12). Это помогает выявить JavaScript ошибки, сетевые запросы, проблемы с загрузкой ресурсов и другие ошибки.
Отладка (debugging) — этап разработки компьютерной программы, на котором обнаруживают, локализуют и устраняют ошибки.
Инструменты сетевого мониторинга: Использование вкладки "Сеть" (Network) в консоли разработчика браузера для анализа сетевых запросов, ответа сервера, заголовков и статусов HTTP.
Анализ производительности (Performance): Изучение вкладки "Performance" для выявления проблем с производительностью клиентской части, таких как долгие загрузки или утечки памяти.
Перезапуск с кешем и без кеша: Очистка кеша и повторная загрузка страницы для исключения проблем, связанных с кешированием.
Эмуляция/симуляция мобильных устройств: Использование инструментов эмуляции и симуляции для проверки отображения и работы на разных на мобильных устройствах.
Fiddler/Charles Proxy: Для перехвата и анализа сетевых запросов, когда нужно глубже проанализировать обмен данными между клиентом и сервером.

Методы локализации в серверной части:
Postman: Использование инструментов для отправки API-запросов напрямую к серверу для проверки корректности обработки запросов и ответов без участия клиентской части.
Логи сервера: Просмотр серверных логов, чтобы выявить ошибки или исключения, возникающие на сервере при выполнении запросов.
Мониторинг серверных ресурсов: Анализ нагрузки на сервер, доступности ресурсов (CPU, память, диск) с помощью мониторинговых систем, чтобы понять, не является ли дефект следствием нехватки ресурсов.
Дебаг на стороне сервера: Совместная работа с разработчиками для использования отладочных инструментов сервера (например, отладка с помощью IDE или других инструментов логирования).
Анализ базы данных: Проверка запросов к базе данных на правильность, выполнение и результаты с помощью инструментов мониторинга БД (например, SQL-запросы, используемые сервером).
Тестирование кэширования: Проверка корректности работы серверного кэширования, например, как сервер обрабатывает повторяющиеся запросы и обновляет данные.Redis и Memcached: Для серверного кэширования часто используются Redis и Memcached. Их нужно тестировать на корректную работу в плане производительности и хранения данных.





