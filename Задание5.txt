Что такое Тест план?

Тест план (Test Plan) — это документ, описывающий весь объем работ по тестированию, начиная с описания объекта, стратегии, расписания, критериев начала и окончания тестирования, до необходимого в процессе работы оборудования, специальных знаний, а также оценки рисков с вариантами их разрешения.
Что должен описывать тест план?
Тест план включает следующую информацию:
объект тестирования — полное описание того, что мы будем тестировать. Например, тестовыми объектами могут быть Android или iOS приложения, веб-сайт, ПО для персональных компьютеров и т.д.
стратегия тестирования — общий план, который описывает подход к проведению тестирования цикла разработки программного обеспечения. Эта стратегия включает в себя методы тестирования новых функций, общее время и ресурсы, необходимые для реализации проекта.
тест процедуры — подробные инструкции, объясняющие как настроить, выполнить и оценить результаты для данного теста.
критерии для начала и окончания тестирования — показывают нам, какие задачи должны быть завершены для определенного уровня тестирования, прежде чем QA инженер сообщит, что тестирование завершено
необходимые ресурсы для тестирования — показывают сколько тестировщиков будет задействовано, какую тестовую среду они будут использовать, компьютеры, мобильные телефоны и т.д.
предварительные условия включают в себя состояние системы и ее окружение, настройку и конфигурацию, необходимые для успешного выполнения тестирования.
оценка рисков с предлагаемыми способами их решения.
Виды тест-планов:
Мастер Тест-План (Master Test Plan): “Главный план тестирования (master test plan, project test plan): План тестирования, обычно охватывающий несколько уровней тестирования.” (ISTQB). Это может быть как единственный базовый план, так и главный в иерархии нескольких планов, самый статичный и высокоуровневый. Нужен когда:
продукт имеет множество релизов или итераций, между которыми сохраняется общая информация, которую нет смысла повторять;
различные тестовые команды работают над одним продуктом, выполняя различные задачи, которые необходимо объединить в рамках одного документа;
Детальный Тест-план (Phase Test plan): “Уровневый план тестирования (level test plan): План тестирования, обычно относящийся к одному уровню тестирования.” (ISTQB). Детальный план составляется на каждый релиз/итерацию или для каждой команды в рамках проекта и является динамическим, т.е. может претерпевать изменения по необходимости. Его основная цель - кратко и доходчиво отразить задачи тестирования. Детальных планов может быть несколько для отдельных модулей ПО или команд тестирования. Кроме того, могут быть созданы планы для отдельных уровней тестирования (Level Test Plan) или видов тестирования. В Agile проектах могут быть планы итерационного тестирования (iteration testing plans) для каждой итерации;
План приемочных испытаний (Acceptance Test Plan, ПСИ): план приемочного тестирования отличают от обычного плана тестирования факторы, которые приводят к принятию бизнес-решения. План приемочного тестирования - это один из жизненно важных документов, который содержит руководство по выполнению приемочного тестирования для конкретного проекта. Пишется на основе бизнес-требований (Business Requirements). Ревью этого плана обычно выполняется by Managers/Business Analysts/Customers.

Что такое Чек лист?
Чек лист - это это список проверок, которые помогают тестировщику протестировать приложение или отдельные функции.
Перечислите возможные атрибуты Чек листа
Чек-лист состоит из следующих атрибутов: · номер чек-листа · название · описание · дата проверки · интервал повторения · проверяющий (ФИО) · список объектов · список работ.
Перечислите варианты статусов при прохождении Чек листа
Выполненные пункты отмечаются статусами, например: “Passed”, “Failed”, “Blocked”, “Skipped”, “Not run”. Эти статусы также могут иметь свой цвет
	Что такое Тест кейс?
Тест-кейс — это алгоритм действий, по которому предполагается тестировать уже написанную программу. В нем подробно прописаны шаги, которые нужно сделать для подготовки к тесту, сама проверка и ожидаемый результат.
	Перечислите атрибуты Тест кейса?
Атрибуты тест-кейса:
Уникальный номер. Это может быть любая нумерация, принятая в проекте. Он позволит ссылаться на определенные тесты по номеру.
Заголовок. Кратко, но ёмко описывает конкретную цель тест-кейса ― что именно нужно проверить.
Предусловия. Условия, которые нужно соблюсти перед началом тест-кейса. Как правило, нужно авторизоваться или находиться в определённом разделе программы.
Окружение. Где именно работал тестировщик: на каком устройстве, в каком браузере. Иногда его заполняют до тестирования, чтобы указать, на каком именно оборудовании и ПО его проходить. Иногда — после, и тогда тестировщик сам указывает, в каком окружении работал.
Постусловия. Действия, которые нужно проделать после проведения проверки. Этот пункт встречается редко, но иногда он необходим. Например, может понадобиться удалить внесенные данные, чтобы они не скапливались в базе.
Шаги ― последовательность шагов, которую нужно проделать для проверки.
Ожидаемый результат тест-кейса. То, что тестировщик должен получить от системы после или во время прохождения шагов.
Статус. Passed/Failed, то есть Успех/Провал или другой. Его заполняет тестировщик из заранее определенных вариантов, принятых в команде.
Фактический результат тест-кейса. То, что получилось после выполнения шагов тест-кейса. Часто этого поля нет, и фактический результат описывают в баг-репорте в случае статуса failed.
Перечислите виды Тест кейсов?
Тест-кейсы могут быть позитивными, негативными и деструктивными.
Позитивный тест-кейс проверяет отсутствие сообщений об ошибке там, где это не предусмотрено, и исполнение системой позитивного сценария нормального использования ПО.Например, при регистрации необходимо ввести пароль из шести символов. Ожидаемый результат — система дает пользователю возможность создать такой пароль.
Негативный тест-кейс определяет поведение системы при получении некорректных входных данных. В этом случае система не проигрывает позитивный сценарий, то есть не делает того, что не предусмотрено.Например, при регистрации вводится несуществующий электронный адрес: система сообщает об ошибке и не заканчивает процесс регистрации пользователя.
Деструктивный тест-кейс проверяет систему на прочность. С его помощью тестировщики изучают сценарии работы ПО в экстремальных условиях, например при повышенной нагрузке, при попытках взломать страницу или внедрить сторонние скрипты в формы регистрации.Так, деструктивный тест-кейс проверяет поведение системы при попытке ввести в поле регистрации скрипта для удаления базы данных.
	Что такое Тестовый набор (Test Suite)?
Тестовый набор — это набор тестовых случаев, сгруппированных для определенной цели . Он может охватывать несколько функций или возможностей приложения
	Что такое Баг репорт?
Баг-репорт (bug report) — это технический документ, который подробно описывает ошибку в работе программы, приложения или другого ПО.
	Какое нужно соблюдать правило в баг репорте для хорошего Summary?
Следует соблюдать некоторые правила:
Тщательно заполнять все поля точной и корректной информацией, которой должно быть достаточно для понимания сути проблемы.
Использовать правильный технический язык.
Подробно описывать шаги воспроизведения бага. Нехватка деталей может привести к невозможности воспроизведения дефекта.
Избегать дубликатов отчётов. Может возникнуть ситуация, при которой несколько специалистов напишут отчёты об одном и том же баге. Также тестировщик может забыть, что раньше уже описывал эту проблему.
Описывать дефект так, чтобы получатель отчета не сомневался в том, что это действительно ошибка, а не нормальное поведение ПО. Этого можно избежать за счет подробного объяснения фактического и ожидаемого результата.
Делать новые отдельные отчеты для каждого дефекта, чтобы избежать путаницы и быстрее исправить все ошибки.
Придерживаться принятых шаблонов оформления и традиций.
Не добавлять лишние шаги в раздел воспроизведения ошибки и делить на пункты то, что можно заменить одной фразой. Также не стоит в начале каждого отчета о дефекте подробно описывать как запустить приложение и привести его в то или иное состояние. Можно описать нужное состояние приложения в первом шаге. Например: приложение запущено и проработало более 30 минут.
	Перечислите атрибуты Баг репорта?
Атрибуты баг-репорта: 
Идентификатор дефекта(уникальное значение, которое позволяет отличить один дефект от другого). Наличие идентификатора у дефекта повышает эффективность их исправления.
Краткое описание дефекта. Оно содержит лаконичные ответы на вопросы «Что произошло?» «Где это произошло»? «При каких условиях это произошло?».
Подробное описание проблемы.Оно предоставляет в развернутом виде необходимую информацию о дефекте, а также описание фактического и ожидаемого результата.
Шаги по воспроизведению. Это краткий набор инструкций по воспроизведению ошибки, с которой столкнулся QA-инженер. Эти шаги помогут IT-специалистам быстрее найти и исправить дефект.
Воспроизводимость.Она показывает каждый ли раз удаётся вызвать дефект.
Комментарий.Он содержит любые полезные для понимания и исправления дефекта данные.
Приложение. Сюда QA-специалисты могут прикрепить скрины, видео и т.д. 
Серьёзность и приоритетность.
Опишите Жизненный цикл бага
8 этапов жизненного цикла бага:
Новый. Когда тестировщик обнаруживает ошибку при тестировании ПО, она попадает в категорию «Новая», а на следующих этапах жизненного цикла ошибка проверяется и тестируется.
Назначен. Ошибка идентифицируется, утверждается руководителем тестирования, публикуется тестировщиком, а затем передаётся команде разработчиков для работы над ней. Наконец, руководитель группы тестирования или менеджер по контролю качества передаёт ошибку разработчику.
Исправлен. После того как разработчик проанализирует ошибку и внесёт изменения в код для её исправления, он может пометить ошибку как исправленную и передать её команде тестирования для дальнейшей обработки.
Проверен. Если тестировщик удостоверился, что дефект был устранён, он переводит баг в эту стадию. Обычно такую проверку выполняет тестировщик, который составлял отчёт о дефекте.
Закрыт. После исправления ошибки тестировщик проводит повторное тестирование. QA-инженер «закрывает» баг, если считает, что ошибка была успешно устранена. Также дефект может перейти в этот статус, если программисты считают, что программа так и должна работать, данный дефект уже взят в работу, его невозможно воспроизвести или исправить.
Открыт заново. В это состояние отчёт переводит тестировщик, удостоверившись, что дефект по-прежнему воспроизводится, хотя он должен быть уже исправлен.
Отклонен. Ошибка обычно отклоняется, если разработчик считает ее неточной.
Отложен. Когда ошибка так помечена, она имеет более низкий приоритет и может быть исправлена в следующем релизе.
	Что такое Priority?
Приоритет (Priority) - это атрибут, указывающий на очередность выполнения задачи или устранения дефекта. Чем выше приоритет, тем быстрее нужно исправить дефект.
Перечислите классификации Priority
P1 Высокий (High)
Ошибка должна быть исправлена как можно быстрее, т.к. ее наличие является критической для проекта.
P2 Средний (Medium)
Ошибка должна быть исправлена, ее наличие не является критичной, но требует обязательного решения.
P3 Низкий (Low)
Ошибка должна быть исправлена, ее наличие не является критичной, и не требует срочного решения.
	Что такое Severity?

Серьезность (Severity) - это атрибут, характеризующий влияние дефекта на работоспособность приложения.
Перечислите классификации  Severity
S1 Блокирующая (Blocker)
Блокирующая ошибка, приводящая приложение в нерабочее состояние, в результате которого дальнейшая работа с тестируемой системой или ее ключевыми функциями становится невозможна. Решение проблемы необходимо для дальнейшего функционирования системы.
S2 Критическая (Critical)
Критическая ошибка, неправильно работающая ключевая бизнес логика, дыра в системе безопасности, проблема, приведшая к временному падению сервера или приводящая в нерабочее состояние некоторую часть системы, без возможности решения проблемы, используя другие входные точки. Решение проблемы необходимо для дальнейшей работы с ключевыми функциями тестируемой системой.
S3 Значительная (Major)
Значительная ошибка, часть основной бизнес логики работает некорректно. Ошибка не критична или есть возможность для работы с тестируемой функцией, используя другие входные точки.
S4 Незначительная (Minor)
Незначительная ошибка, не нарушающая бизнес логику тестируемой части приложения, очевидная проблема пользовательского интерфейса.
Приведите пример Низкого Priority и Высокого Severity
Краш системы на винде, допустим хр, но заказчики допустим используют Win7 и выше.
	Приведите пример Низкого Severity и Высокого Priority
Опечатка в имени спонсора или вашего сайта на главной странице.
	Что такое Матрица соответствия требований (Requirements Traceability Matrix)?
Матрица трассируемости — двумерная таблица, содержащая соответствие функциональных требований продукта (functional requirements) и подготовленных тестовых сценариев (test cases).На пересечении соответствующих строки и столбца ставится отметка, обозначающая, что данное требование покрывается данным тест-кейсом.Матрицы трассировки, как способ наглядного представления связей, применяются при анализе и проектировании систем для:
определения покрытия исходных требований (все ли требования потребителя, заказчика учтены в проекте?),
определения связей между требованиями и функциями, данными и функциями проектируемой системы,
распределения функций по элементам физической архитектуры системы,
управления другими типами проектных данных, например, распределение User Story по спринтам (в рамках методологии Scrum).
Что такое Тест-отчет?

Отчет о тестировании — это документ с данными о проведённых работах в сфере обеспечения качества, результатами тестирования, оценкой качества ПО и рекомендациями. Для наглядности в отчете представлены ссылки, списки, таблицы, графики, цифры.
	По времени Тест отчет на сколько типов возможно разделить?
QA-отчеты делятся на два вида:
Промежуточные
Итоговые
Промежуточный отчет составляется и отправляется на всех заинтересованных лиц после проведения каждого вида тестов. Данный тип отчета составляет инженер по тестированию, проверивший заданную часть функциональности. 


В конце предопределенного промежутка времени (обычно за неделю либо перед выходом очередной сборки) составляется итоговый отчет о всей проделанной работе. В отчете отражена информация о качестве всех проведенных видов тестов.
Итоговый  отчет  о  тестировании  (test  summary  report):  Документ,  подводящий  итог  задачам  и результатам тестирования, также содержащий оценку соответствующих объектов тестирования относительно критериев выхода. В финальном отчете важно показать общий взгляд на проделанную работу (в контексте установленных метрик) и эволюцию продукта.
Также, надо дать исчерпывающую информацию о статусе продукта в данный момент (количество оставшихся неисправленных ошибок, полностью ли протестирован продукт или требуется дополнительный цикл тестирования, оценка возможности выпуска продукта во «внешний мир» и т.д).

