Задание 8
Ответить на вопросы:
Что такое эстимирование?
Перечислите Принципы эстимирования
Какие техники оценивания разработки программного обеспечения вы знаете?
Приведите пример Процесса оценки по каждой технике эстимирования
Что такое Риск(Risks)?
Эстимация – процесс оценки или прогнозирования количественных характеристик ресурсов, необходимых для реализации проекта. Это управленческая деятельность, которая приблизительно показывает, сколько времени и денег потребуется для выполнения задачи.
Основные принципы эстимирования:

1. Четкость целей и требований: Для точной оценки необходимо иметь ясное понимание целей проекта и требований. Если требования неясны или изменчивы, оценки могут быть неточными.

2. Опыт и знания: Использование знаний и опыта команды важно для более точной оценки. Чем больше информации о предыдущих проектах и аналогичных задачах, тем лучше.

3. Разбиение на подзадачи: Разделение больших задач на более мелкие и управляемые подзадачи позволяет улучшить точность оценок и упростить оценку времени на выполнение каждой части.

4. Использование исторических данных: Опора на предыдущие оценки и фактические затраты помогает создать более реалистичные и обоснованные оценки.

5.Учет рисков и неопределенностей: Важно осознавать, что не все аспекты проекта можно предсказать. Учет рисков и неопределенностей, а также резервирование времени под них может повысить точность оценки.

6. Ретроспективный анализ: После завершения проекта полезно проводить обзор оценок и фактических затрат, чтобы выявить несоответствия и улучшить будущие оценки.

7.Участие всех заинтересованных сторон: Вовлечение разработчиков, тестировщиков и других членов команды в процесс оценки способствует учету различных точек зрения и усиливает обязательство к соблюдению оценок.

8.Применение множества методов оценки: Использование различных подходов, таких как экспертные оценки, метод триангуляции, Planning Poker, а также аналоговые и параметрические методы, может привести к более точным оценкам.

9.Итеративный подход: Оценка может быть уточнена на протяжении всего процесса разработки. Итеративный подход позволяет вносить изменения в оценки по мере развития проекта и появления новых данных.

10.Коммуникация и прозрачность: Четкая коммуникация между участниками проекта о процессе оценки и ее результатах помогает установить реалистичные ожидания и избежать недоразумений.
Three-point estimating
Математическая техника оценки через распределение вероятностей по трем точкам:
A – наилучший вариант
M – наиболее вероятный
B – наихудший вариант
Эстимация по трем точкам предполагает установку трех временных точек: оптимистичное, пессимистичное и среднее время, потраченное на тестирование. Согласно формуле происходит расчет, находится стандартное отклонение и финальная эстимация заносится в необходимый документ.

T-shirts estimating
T-shirts – это разновидность hight-level оценки, когда нужно предварительно оценить объем задачи.
При оценке используются единицы – S, M, L, XL – соответствующие размерам футболок, откуда и походит название метода.
Planning poker
Planning poker (или Scrum poker) помогает agile командам оценивать задачу или scope задач из Backlog.
 В планировании участвует вся команда и у каждого участника есть свой набор карт. Все наборы на руках должны быть одинаковые. После того как задача будет рассмотрена и обсуждены все детали, участники покера одновременно показывают выбранные ими карточки. Эти карточки обозначают время, которое участник выбрал как необходимое для завершения этой задачи. Если есть большой разброс в результатах – стоит рассмотреть вариант о дополнительной дискуссии и последующим переголосованием, ведь возможно первоначальные результаты не учли какие-то необходимые детали или у участников разное представление об имплементации задачи.
В случае небольших разбежностей в голосовании – можно взять среднее число.
Story Points – это способ оценить сложность задачи, а не время которое будет на нее затрачено, как иногда принято ошибочно считать.
Для работы со Story Point принимается за эталон какая-то конкретная задача и, скажем она будет занимать 5 Story Points. Советуют иметь несколько эталонных задач, например на 5 и на 2 Story Points.
Дальнейшая оценка задач происходит в их сравнении с эталонными. Путем деления больших задач на более мелкие, их можно легко сравнивать с имеющимися задачами и эстимировать.


WBS
Work Breakdown Structure (WBS) – это способ оценки проекта, методом разделения его на более мелкие части. Например, если нам нужно оценить проект целиком, нужно его разделить на epics, их на modules, модули на submodules, submodules на features, а их уже на самые маленькие задачи, пока они не станут неделимы.
В результате мы получим иерархическую структуру проекта, который должен быть выполнен командой. Оценив каждую маленькую часть в отдельности, возможно будет оценить весь проект целиком, но при этом стоит учитывать и зависимости между модулями.
Создание иерархической структуры проекта поможет вам получить детальную информацию о работе, которую необходимо выполнить.
Delphi
Метод Delphi – это метод оценки путем структурированной коммуникации, в которой участвует группа экспертов. Участники отвечают на анкеты в несколько раундов. После каждого раунда ведущий предоставляет анонимные результаты прогнозов экспертов из предыдущего раунда с обоснованием их суждений. Затем экспертам предлагается пересмотреть свои предыдущие ответы в свете ответов других коллег.
Считается, что в ходе этого процесса диапазон ответов уменьшится, и группа будет сходиться к «правильной» оценке. Наконец, процесс останавливается после заранее определенного критерия остановки (например, количества раундов, достижения консенсуса и стабильности результатов), и средние оценки финальных раундов определяют конечный результат.
Пальцем в небо - оценка строится на предположении и внутренних ощущениях тестировщика
Оценка на основе опыта - у нас есть предыдущий опыт, к примеру, прошедшая итерация.


Риски
Риски в тестировании  — это возможные проблемы, которые могут возникнуть в ходе разработки или использования продукта, они приводя к дефектам, задержкам, сбоям или неудовлетворительным результатам. Управление рисками является важной частью тестирования, так как помогает минимизировать вероятность негативных последствий.

Проектные риски
Проектные риски касаются ограничений и проблем, связанных с управлением проектом и организацией процесса разработки. Они могут возникнуть из-за нехватки времени, ресурсов или неопределённых требований.
Примеры проектных рисков:
Недостаток времени:
Тестирование часто выполняется в последние этапы разработки, и если сроки сжаты, на тестирование может быть выделено недостаточно времени. Это ведет к поверхностному тестированию и пропуску критических дефектов.
Недостаток ресурсов:
Ограниченное количество тестировщиков, недостаточная квалификация команды или отсутствие необходимых инструментов для тестирования могут снизить эффективность тестирования и увеличить вероятность возникновения ошибок.
Неопределенные или изменяющиеся требования:
Если требования к системе не фиксированы или часто изменяются в ходе проекта, это приводит к тому, что тестировщики постоянно сталкиваются с новыми условиями. Это увеличивает вероятность появления ошибок и усложняет процесс проверки системы.
Низкий приоритет тестирования:
В некоторых проектах тестирование может рассматриваться как второстепенная задача. Когда оно недооценено, проблемы могут быть выявлены слишком поздно или не выявлены вовсе.
Технические риски
Технические риски связаны с качеством программного продукта и его характеристиками. Они могут возникнуть из-за ошибок в коде, проблем с интеграцией, недостаточной производительности или уязвимостей безопасности.
Примеры технических рисков:

Дефекты и баги:
Основной риск, связанный с тестированием — это наличие ошибок в коде. Они могут проявляться в виде проблем с функциональностью, некорректной работы алгоритмов, неправильной обработки данных и т.д. Такие дефекты могут привести к сбоям, отказам системы или неправильному поведению продукта.
Проблемы с интеграцией:
Когда отдельные модули или системы интегрируются в единое целое, могут возникнуть несовместимости. Продукт может работать корректно по отдельности, но при объединении возникают конфликты, ведущие к сбоям или снижению производительности.
Недостаточная производительность:
Продукт может оказаться не способным выдерживать ожидаемую нагрузку. Например, веб-сайт может работать медленно при высоком количестве пользователей, что отрицательно сказывается на пользовательском опыте.
Безопасность:
Уязвимости в системе могут стать целью атак хакеров. Недостаточная защита данных, слабая аутентификация или уязвимости в коде могут привести к серьёзным последствиям, таким как утечка данных или несанкционированный доступ.
 Риски качества
Эти риски касаются того, как хорошо продукт соответствует ожиданиям пользователей, и связаны с ограничениями в процессе тестирования.
Примеры рисков качества:
Низкий пользовательский опыт (UX):
Продукт может оказаться сложным в использовании, что приведет к разочарованию пользователей. Даже если с точки зрения технической функциональности система работает правильно, неудобный интерфейс или сложная навигация могут стать серьёзной проблемой для конечного пользователя.
Невозможность протестировать все сценарии:
В реальной практике существует огромное количество возможных вариантов использования продукта, и протестировать все комбинации событий крайне сложно. Это означает, что некоторые сценарии могут остаться непроверенными, что увеличивает риск появления неожиданных ошибок в ходе эксплуатации.


Организационные риски
Эти риски связаны с управлением и организацией процесса тестирования внутри команды и компании.
Примеры организационных рисков:
Недостаточная коммуникация:
Когда разработчики, тестировщики и менеджеры не находятся на одной волне, может возникнуть множество проблем. Например, требования могут быть переданы тестировщикам не в полном объеме, или дефекты могут неправильно трактоваться разработчиками.
Уход ключевых сотрудников:
Если в процессе разработки или тестирования уходят ключевые члены команды, это может привести к потере важной информации или замедлению работы. Новый персонал потребуется обучить, что также займет время.



