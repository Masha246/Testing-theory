Требования — это исходные данные, на основании которых проектируются и создаются автоматизированные информационные системы. 
Анализ требований - это процесс выявления, определения и документирования требований к программному продукту. Цель анализа - определить потребности пользователей и перевести их в требования для оценки затрат по проекту и разработки программного продукта.
Перечислите Виды требований


Функциональные требования – они определяют именно функции и возможности, которыми должен обладать продукт. Например, требование возможности регистрации пользователя на сайте, редактирования профиля, создания аватара;
Нефункциональные требования – это характеристики конкретной системы: безопасность, совместимость, производительность и т.д. Например, требование к загрузке приложения на смартфоне за определенное время, объем пользователей, которые могут одновременно работать с ним.
Также можно разделить требования на 3 категории:
Явные – базовый тип требований. Это то, что клиент передает специалистам в виде документации с описанием каркаса ПО, критериев приема, спецификации дизайна. Иногда эти требования могут быть переданы в частной переписке, маркетинговых инструментах и т.д.;
Неявные – это то, что клиент хочет видеть, но не упоминает, полагаясь на профессионализм разработчиков. Сюда могут входить производительность, доступность, безопасность и другие параметры. Неявные требования должны быть в тестировании обязательно, чтобы обеспечить нефункциональный компонент продукта;
Скрытые – то, что клиент не ожидает увидеть/не знает о таких возможностях, но это может быть использовано для увеличения конкурентоспособности продукта, модернизации. Например, это различные анимации, мелкие функции, заполняющие пустые пространства. Часто это цепляет клиента сильнее всего.
К функциональным уровням требованией относят:
1.1. Бизнес-требования. Что система должна делать с точки зрения бизнеса. Выражают цель, ради которой разрабатывается продукт (зачем вообще он нужен, какая от него ожидается польза, как заказчик с его помощью будет получать прибыль).  Пример бизнес-требования: промо-сайт, привлекающий внимание определенной аудитории к определенной продукции компании.
1.2. Пользовательские требования описывают задачи, которые пользователь может выполнять с помощью разрабатываемой системы (реакцию системы на действия пользователя, сценарии работы пользователя). Поскольку здесь уже появляется описание поведения системы, требования этого уровня могут быть использованы для оценки объема работ, стоимости проекта, времени разработки и т.д. Пользовательские требования оформляются в виде вариантов использования (use cases), пользовательских историй (user stories), пользовательских сценариев (user scenarios). Пример: при первом сохранении новой статьи система должна выдавать запрос на сохранение в виде черновика или публикацию.
1.3. Функциональные требования – определяют функциональность (поведение) программной системы, которая должна быть создана разработчиками для предоставления возможности выполнения пользователями своих обязанностей в рамках бизнес-требований и в контексте пользовательских требований. Пример: система должна автоматически выполнять резервное копирование данных ежедневно в указанный момент времени.
1.4. В группу функциональных требований относят и Системные требования. Эти характеристики могут описывать требования как к аппаратному обеспечению (тип и частота процессора, объем оперативной памяти, объём жёсткого диска), так и к программному окружению (операционная система, наличие установленных системных компонентов и сервисов и т. п.). Обычно такие требования составляются производителем или автором ПО. Например, для игры это могут быть требования такого типа: видеокарта — объем памяти от 64 Мб, совместимость с DirectX 9.0b и новейшие драйвера. Для сайта: ОС — Windows не ниже XP, браузеры IE не ниже 7.0 и так далее.

Нефункциональные требования, соответственно, регламентируют внутренние и внешние условия или атрибуты функционирования системы. К. Вигерс выделяет следующие основные группы нефункциональных требований:
1. Бизнес-правила. Они определяют почему система работать должна именно так, как написано. Это могут быть ссылки на законодательство, внутренние правила заказчика и прочие причины. Часто упускают этот раздел и получается, что некоторые системные решения выглядят нетипичным и совсем неочевидными. Например, многие табачные компании и компании, производящие алкоголь требуют постоянного доказательства того, что промо-сайтами пользуются люди, достигшие определенного возраста. Это бизнес-правило (подтверждение возраста) возникает по требованию этических комитетов заказчика, хотя и несколько противоречит маркетинговым целям и требованиям по usability.
2. Внешние интерфейсы. Это не только интерфейсы пользователя, но и протоколы взаимодействия с другими системами. Например, часто сайты связаны с CRM системами. Особенности протокола взаимодействия «сайт-CRM» также относятся к нефункциональным требованиям.
3. Атрибуты качества. Атрибуты касаются вопросов прозрачности взаимодействия с другими системами, целостности, устойчивости и т.п. К таким характеристикам относятся:
— легкость и простота использования (usability)
— производительность (performance)
— удобство эксплуатации и технического обслуживания (maintainability)
— надежность и устойчивость к сбоям (reliability)
— взаимодействия системы с внешним миром (interfaces)
— расширяемость (scalability)
— требования к пользовательским и программным интерфейсам (user and software interface).
4. Ограничения – формулировки условий, модифицирующих требования или наборы требований, сужая выбор возможных решений по их реализации. В частности, к ним могут относиться параметры производительности, влияющие на выбор платформы реализации и/или развертывания (протоколы, серверы приложений, баз данных и т.д.). Ограничения часто основываются на бизнес-правилах.

Перечислите техники сбора требований
Опрос – подразумевает опрос существующих и потенциальных пользователей продукта (например, интервью, анкеты);
Наблюдение – подразумевается наблюдение за работой пользователей;
Изучение правил работы пользователей по существующим регламентам/законодательству, а также изучение существующих документов, описывающих бизнес клиента или существующего продукта;
Анализ истории использования продукта по его техническим журналам;
Изучение существующих продуктов конкурентов на рынке;
Обсуждения и мозговые штурмы с пользователями и экспертами;
Маркетинговые исследования;
Моделирование – может включать в себя как моделирование существующих бизнес-процессов, так и верхнеуровневое моделирование будущей системы.
К традиционным методам выявления требований относятся также использование интервью и анкет, наблюдение, изучение деловых документов.
Спецификация требований программного обеспечения (англ. software requirements specification, SRS) — структурированный набор требований/запросов (функциональность, производительность, конструктивные ограничения и атрибуты) к программному обеспечению и его внешним интерфейсам.
Когда разрабатывают ПО, для него пишут спецификацию — большой документ, который описывает, как должна работать система или продукт. Он состоит из разных требований: от бизнеса, пользователей, требований к функциям ПО, интерфейсам, операционной системе. 
Use case («вариант использования») — это часть такого документа. Он описывает, какие действия выполняет пользователь и как система должна на них реагировать. Пример простейшего use case: пользователь заполнил поля формы, а система должна сохранить введенные данные.
Перечислите Характеристики качества требований



Атомарность 
Критерий атомарности предписывает разбивать требования на неделимые элементы, обеспечивая их ясность и управляемость. Это улучшает понимание смысла задачи, предотвращают двусмысленность и обеспечивают более эффективное управление проектом.
Например, требования «Система должна иметь высокую производительность» или «Пользователи могут добавлять товары в корзину» недостаточно атомарные. Лучше сформулировать их таким образом:
«Система должна предоставлять кнопку «Добавить в корзину» на каждой странице товара, и при клике на нее товар должен моментально отобразиться в корзине». 
Полнота 
Этот критерий указывает на необходимость охвата всех важных аспектов IT-продукта, чтобы избежать пробелов в функциональности или особенностях. Полные требования обеспечивают картину ожидаемого результата и поведения системы.
Предположим, вы хотите указать, что система должна предоставлять возможность регистрации пользователей. В таком случае полное требование звучит так: «Система должна предоставлять возможность регистрации пользователей, включая сбор данных об имени, адресе электронной почты и пароли. После успешной регистрации юзеру должно быть отправлено письмо с подтверждением на указанный e-mail».  
Критерий непротиворечивости требований обеспечивает логическую согласованность между различными частями документа. Предположим, система должна поддерживать высокую производительность и быть доступной 99,99% времени в течение года. Услышав это, технический отдел возразит, что для обеспечения высоких показателей работы могут потребоваться периоды планового обслуживания, что может повлиять на доступность программы или веб-сайта. Чтобы удовлетворить обе стороны, можно сформулировать запрос таким образом: «Система должна обеспечивать высокую производительность, поддерживая при этом минимальное время простоя. Доступность должна составлять не менее 99,5% времени в год». 
Краткость 
Требования к качеству должны быть выражены лаконично, без лишних деталей. Слишком подробные или избыточные формулировки могут внести путаницу и усложнить восприятие сути. Вы можете сказать, что «пользовательский интерфейс должен обладать дизайном, который удовлетворяет эстетические предпочтения конечных пользователей» — это громоздко! Достаточной для понимания будет фраза об «интерфейсе с привлекательным дизайном». 
Выполнимость 
Критерий выполнимости требований определяет, насколько реально и осуществимо реализовать предложенные запросы. Здесь учитываются технические, финансовые и временные ограничения, а также другие ресурсы для успешного выполнения задачи. 
Теоретически, вы можете описать в запросе систему со способностью обработки 1 терабайта данных в секунду или потребовать создать продукт сроком на разработку в три дня без влияния на качество и функциональность. Но очевидно, что такой вариант реализации невозможен.
Однозначность 
Однозначность гарантирует, что каждое требование может быть четко и в единственном варианте идентифицировано, понято и интерпретировано. Отсутствие двусмысленности в формулировке помогает избежать недопониманий и уточнений, что существенно влияет на эффективность коммуникации между участниками проекта. 
Недостаточно однозначное требование — «Система должна работать быстро». Здесь понятие скорости каждый разработчик может понять по-своему, поэтому лучше указать так: «Время загрузки главной страницы не должно превышать 3 секунд». 
Тестируемость 
Тестируемость в требованиях обеспечивает возможность проведения эффективной проверки на соответствие системы установленным стандартам и ожиданиям. Четкость и измеримость заданных условий существенно влияют на качество и надежность конечного продукта.
Рассмотрим пример хорошо сформулированного требования: «Приложение должно корректно обрабатывать входящие данные формы, включая случаи ввода специальных символов и чисел с плавающей запятой». Такая «задача» позволяет легко определить тестовые случаи для различных вариантов ввода и проверить соответствие результатов. 
Ранжированность 
С помощью ранжирования вы можете создать уровни требований, упорядочив их по степени важности. Это позволит вашей команде фокусироваться на ключевых аспектах и, при необходимости, откладывать менее значимые задачи. Такой подход особенно важен в условиях ограниченных ресурсов. 
Правильно составленное требование будет звучать так: «Реализовать авторизацию и аутентификацию пользователей перед разработкой других функций приложения». Такая формулировка указывает на высокий приоритет обеспечения безопасности системы. Или так: «Обеспечить поддержку основных функций на мобильных устройствах до начала работы над адаптивным дизайном для планшетов и ноутбуков». Здесь видно, что приоритетная целевая аудитория — пользователи со смартфонами. 
Пользовательская история — это описание функциональной возможности ПО простыми, общими словами, составленное с точки зрения конечного пользователя. 
"Как зарегистрированный пользователь, я хочу сбросить свой пароль, чтобы восстановить доступ к своей учетной записи".
“Как пассажир я хочу бронировать поездку заранее, чтобы быть уверенным в подаче машины к определенному времени”

Плюсы и минусы пользовательских историй
Плюсы
✅ User Story сфокусирована на пользователях
Сбор требований и оформление пользовательских историй начинают с интервью и опросов. Это помогает сразу получить обратную связь от пользователей: узнать их точки зрения, боли и потребности.

✅ User Story можно обсуждать в команде
 Основную часть пользовательской истории формулируют так, чтобы любой участник команды смог предлагать идеи, думая как пользователь.

 ✅ User Story помогает поэтапно разрабатывать продукт
В историях описываются функции, которые можно разработать и протестировать за одну итерацию, или этап. Поэтому инструмент подходит для итеративной разработки и Agile.

Минусы
❌ User Story не заменит требований
Если компании нужен документ с требованиями, то пользовательских историй недостаточно. User Stories могут не затрагивать важных нефункциональных требований: производительности, масштабируемости и безопасности.

❌ Если в User Story недостаточно деталей, её можно по-разному интерпретировать
Разночтения возникают, если забыть важные детали или описать их поверхностно. Это может привести к ошибкам в продукте.

Критерии приемки - это условия, которым должен удовлетворять программный продукт, чтобы быть принятым пользователем, заказчиком или, в случае функциональности системного уровня, потребляющей системой. 
Формат критериев приемки (Acceptance Criteria Format/Layout/Template): существует два основных типа критериев приемки, основанные на сценариях и правилах:
Критерии приемлемости, основанные на сценариях (Scenario-based acceptance criteria), используют шаблон для подробного описания конкретного поведения / последовательности действий пользователя.
Критерии приемлемости на основе правил (Rule-based acceptance criteria) - это скорее простой список того, как функция должна выглядеть / работать.
Scenario-based acceptance criteria соответствует формату “Дано/Когда/Тогда”
 Given /какой-то аспект, связанный с поведением пользователя/
When /пользователь выполняет определенное действие/
Then /происходит определенный результат/
Между ними в случае нескольких условий можно добавлять “И” (“AND”).
Rule-Based Acceptance Criteria - это простой список «правил» о том, как функция должна выглядеть / работать:
Все кнопки должны быть определенного цвета;
Кнопка входа должна перенаправлять пользователя в определенный раздел;
Кнопка регистрации должна находиться в определенной области;
Все кнопки должны быть серыми, если не выполняются определенные требования;
и т.д.


User Story: Как пользователь, я хочу иметь возможность зарегистрироваться на сайте, чтобы получить доступ к дополнительным функциям.
Критерии Приемки:
Пользователь может ввести имя, email и пароль.
При успешной регистрации пользователь получает подтверждение на email.
При ошибке в заполнении формы отображается соответствующее сообщение об ошибке.
Введенные данные сохраняются в базе данных.
Пользователь может войти в систему после успешной регистрации.


Метод INVEST:

I (Independent) – ваша история не зависит от выполнения других историй
N (Negotiable) – вы уже несколько раз обсудили историю
V (Valuable) – реализованная история принесет реальную бизнес-ценность
E (Estimable) – возможно оценить трудозатраты, необходимые для выполнения истории
S (Small) – историю можно реализовать за одну итерацию
T (Testable) – есть понятные критерии приемки и тестовые сценарии для проверки реализации

Метрики используются для:отслеживания прогресса команды по срокам проекта и другим временным отрезкам, качественной оценки текущего состояния системы, контроля качества процесса тестирования, постановки целей и эффективного планирования исходя из понимания существующих проблем.
Приемка приложения — процесс тестирования ПО, при котором о нем собирают максимально полную информацию для передачи на дальнейшую разработку. Подходит, если вы в самое ближайшее время планируете дорабатывать функциональность системы, пользуясь услугами сторонних компаний.
Аудит приложения — услуга, в рамках которой происходит тестирование приложения с применением различных заранее согласованных с заказчиком видов тестирования и анализ этого продукта с внесением предложений по его улучшению.
Для аудита  приложения необходимы:
Документация. Должны храниться требования и другая документация проекта по всему, что вы делаете.
Рефакторинг и технический долг. Нужно поддерживать код в актуальном состоянии, своевременно обновлять используемые библиотеки, поддерживать целостность и единообразие исходного кода независимо от текущей разработки новых функций.
Полнота данных. Для эффективной поддержки старого и разработки нового функционала необходимо наблюдать за состоянием приложения и тому, как люди его используют. Здесь помогают мониторинг, крашлитика и другие инструменты.
Анализ Usability. Полезно тестировать Usability и непрерывно проводить улучшения на основе данных.
Гипотезы, чтобы улучшить пользовательский опыт. Вместе с улучшением пользовательского опыта растет количество пользователей, посещений приложения, доходы, а вместе с тем падают затраты на разработку.
Этапы проведения аудита программного обеспечения
Процедура аудита программного обеспечения подразумевает последовательное проведение следующих этапов:
инвентаризация ПО: это начальный этап аудита, в течение которого системный администратор собирает данные о программном обеспечении, установленном на каждом из пользовательских ПК и серверов предприятия.
анализ собранной информации: на данном этапе системный администратор сопоставляет информацию об установленных лицензиях, собранную во время аудита с той, что уже имеется (это либо данные, полученные во время предыдущего аудита, либо вручную составленный перечень лицензий, которые должны быть установлены на пользовательских ПК). Таким образом, формируется таблица, позволяющая точно определить, на котором из компьютеров отсутствуют нужные программы, а на котором они установлены в излишке.
создание отчета: полученная на предыдущем шаге таблица используется для создания отчета. В данном документе отображается не только факт отсутствия/излишка программных лицензий, но и оценивается рациональность использования того или иного приложения. В частности, правильно составленный отчет помогает владельцу компании определиться с выбором конкретного вендора, поставляющего отдельный программный продукт.
Основные задачи:
анализ данных об установленном ПО;
автоматизация рабочих обязанностей системного администратора;
снижение расходов, связанных с приобретением лицензионного софта;
стандартизация и легализация списков программных пакетов для каждого отдела предприятия.
	

