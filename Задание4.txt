
Что такое Тест дизайн?
Тест дизайн - это процесс создания плана или стратегии для проведения тестирования программы или системы. Задача тест-дизайна – разработать эффективные методы исследования продукта, которые займут минимум времени и выделят максимальное количество ошибок.
Для чего нужны Техники тест дизайна?
Главная задача тест-дизайна — подготовить рабочую документацию, то есть разработать сценарии, которые позволят протестировать максимальное количество функций за минимальное время.
Какие знаете техники черного ящика?/Опишите их.
Техники тест дизайна “черного ящика”:
Эквивалентное разделение - это метод, позволяющий упростить процесс тестирования, разделяя все возможные варианты входных данных на группы, которые эквивалентны друг другу. Каждая группа должна содержать однородные входные данные, на которых можно выполнить одну и ту же операцию. Например, для тестируемого элемента интерфейса с вводом данных можно разделить их на группы: пустое значение, минимальное значение, максимальное значение, валидные значения и невалидные значения. Такой подход позволяет минимизировать количество необходимых тестовых случаев и повышает покрытие тестирования.


Метод граничных значений основан на предположении, что проблемы в программе чаще всего возникают на границах допустимых значений. Для каждого параметра или элемента интерфейса необходимо определить краевые значения и протестировать поведение при этих значениях. Например, если тестируется поле для ввода числа от 1 до 100, важно проверить его работу при значениях 1, 100 и значениях вблизи этих границ, чтобы убедиться, что программа корректно обрабатывает эти краевые случаи.


Попарное тестирование, также известное как комбинаторное тестирование, заключается в тестировании всех возможных комбинаций входных значений. Эта техника особенно полезна, когда в системе есть множество входных параметров, и тестирование каждой комбинации занимает слишком много времени. Вместо этого попарное тестирование исследует только те комбинации, где каждый параметр присутствует по крайней мере один раз в паре с другим параметром. Это позволяет достичь оптимального покрытия тестов и существенно сократить количество необходимых тестов.


Таблица принятия решений – это техника с использованием графического инструмента, которая помогает протестировать систему с большим количеством параметров. С помощью таблицы совмещают разные вводные данные и проектируют возможные варианты развития событий. Метод эффективный, но достаточно объемный и требует большого количества времени.


Предугадывание ошибок – это техника, которая помогает тестировщикам переключить свою интуицию на поиск потенциальных ошибок. Это требует хорошего понимания ожидаемого поведения и функциональности продукта, чтобы предвидеть возможные проблемы или случаи, которые необходимо протестировать более тщательно. Чтобы предугадать ошибку, тестировщик должен иметь большой опыт работы.
Тестирование Состояний и Переходов (State-Transition Testing).
Система переходит в то или иное состояние в зависимости от того, какие операции над нею выполняются. Для наглядности возьмем классический пример покупки авиабилетов:

Состояние (state, представленное в виде круга на диаграмме) – это состояние приложения, в котором оно ожидает одно или более событий. Состояние помнит входные данные, полученные до этого, и показывает, как приложение будет реагировать на полученные события. События могут вызывать смену состояния и/или инициировать действия.
Переход (transition, представлено в виде стрелки на диаграмме) – это преобразование одного состояния в другое, происходящее по событию.
Событие (event, представленное ярлыком над стрелкой) – это что-то, что заставляет приложение поменять свое состояние. События могут поступать извне приложения, через интерфейс самого приложения. Само приложение также может генерировать события (например, событие «истек таймер»). Когда происходит событие, приложение может поменять (или не поменять) состояние и выполнить (или не выполнить) действие. События могут иметь параметры (например, событие «Оплата» может иметь параметры «Наличные деньги», «Чек», «Приходная карта» или «Кредитная карта»).
Действие (action, представлено после «/» в ярлыке над переходом) инициируется сменой состояния («напечатать билет», «показать на экране» и др.). Обычно действия создают что-то, что является выходными/возвращаемыми данными системы. Действия возникают при переходах, сами по себе состояния пассивны.
Точка входа обозначается черным кружком.
Точка выхода показывается на диаграмме в виде мишени.
Диаграмма пользовательских ролей
Следующая техника будет называться «Диаграмма пользовательских ролей» (Use Case Diagram).
Представим себе обычный интернет-магазин. Роли:
Администратор
Продавец
Покупатель (зарегистрированный)
Незарегистрированный пользователь
У каждой роли есть свои права и доступы, и каждый из них умеет что-то делать. Все действия будем указывать в небольших прямоугольниках. Стрелка от роли к доступному действию.





Какие знаете техники белого ящика?/Опишите их
Техники тест дизайна “белого ящика”:
Тестирование и покрытие операторов (Statement Testing and Coverage). Тестирование операторов направлено на проверку исполняемых операторов в коде. Покрытие вычисляется как отношение количества операторов, выполненных тестом, к общему числу операторов в тестируемом коде.Это метод проверки того, выполняется ли каждая строка кода хотя бы один раз.

Тестирование и покрытие условий (Decision Testing and Coverage). Тестирование условий направлено на проверку логических условий в коде, а также кода, выполняемого в зависимости от исхода условия. Покрытие вычисляется как отношение числа исходов условий, проверенных тестом, к общему числу исходов тестируемых условий.
Покрытие путей проверяет все пути программы. Это комплексный метод, который гарантирует, что все пути программы будут пройдены хотя бы один раз. Покрытие пути даже более эффективно, чем покрытие ветвей. Этот метод полезен для тестирования сложных программ.



