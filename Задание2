Что такое проект?


Проект - это это комплекс взаимосвязанных мероприятий, направленный на создание уникального продукта или услуги в условиях временных и ресурсных ограничений.
Из каких этапов состоит Waterfall model/Каскадная модель?


Планирование
Анализ требований 
Проектирование и дизайн 
Разработка 
Тестирование и интеграция 
Поддержка 
Каскадная модель  предполагает переход с одного этапа разработки на другой происходит только после полного и успешного завершения предыдущего этапа. Каскадная модель находит свое применение в тех случаях, когда заказчик имеет четкое видение результата и хочет избежать существенных изменений в процессе разработки, а также не стремится активно взаимодействовать с командой разработчиков. Кроме того, каскадная модель подходит для проектов, где заранее определены четкие сроки и конечные результаты каждого этапа.


Какие преимущества и недостатки Waterfall model/Каскадной модели?
Преимущества: 
стабильность требований в течение всего жизненного цикла разработки;
возможность последовательного устранения возникающих сложностей;
определенность и понятность шагов модели и простота ее применения;
упрощение возможности осуществления планирования, контроля и управления проектом;
доступность для понимания заказчиками;
эффективность для проектов с четкими и понятными, но трудно реализуемыми требованиями;
эффективность для проектов с высокими требованиями к качеству при отсутствии жестких ограничений затрат и графика работ.
Недостатки:
сложность четкого формулирования требований в начале жизненного цикла и невозможность их динамического изменения на его протяжении;
последовательность линейной структуры процесса разработки, в результате возврат к предыдущим шагам для решения возникающих проблем приводит к увеличению затрат и нарушению графика работ;
непригодность промежуточного продукта для использования;
невозможность гибкого моделирования систем, не имеющих аналогов;
позднее обнаружение проблем, связанных со сборкой, в связи с одновременной интеграцией всех результатов в конце разработки;
недостаточное участие пользователя в создании системы – только в самом начале (при разработке требований) и в конце (во время приемочных испытаний);
невозможность предварительной оценки качества системы пользователем;
проблемность финансирования проекта, связанная со сложностью единовременного распределения больших денежных средств.


Из каких этапов состоит V-model/V- модель?



Модель основана на объединении фазы тестирования с каждой соответствующей стадией разработки. Разработка каждого шага напрямую связана с этапом тестирования. Следующая фаза начинается только после завершения предыдущей. Каждый этап разработки, напрямую связан с тестированием этого этапа.
Когда использовать V-model/V- модель?


Когда изначально существуют простые и четкие требования к продукту;
Когда проект небольшого размера;
Когда разработчики и тестировщики умеют взаимодействовать по уровням модели.
	Из каких этапов состоит Iterative model/Итеративная модель?


Итеративная модель  — это подход, который оптимизирует процесс разработки программного обеспечения, разбивая его на более мелкие и управляемые части. Итеративная разработка использует повторение циклов или итераций для постоянного усовершенствования программного продукта.
Этапы: 
Фаза требований. На этом этапе идет анализ заявленных требований, обрабатывается и накапливается информация к ПО. Эта операция должна в результате привести к фазе требований, дающей общее и конечное число спецификаций требований.
Фаза дизайна. На этом этапе разрабатывается программный продукт, опираясь на заданные спецификации. Возможно, как создание нового дизайна проекта, так и совершенствование дизайна, созданного ранее.
Фаза внедрение и тестирование. На этом этапе продукт успешно внедрен, закодирован и протестирован.
Фаза обзора. Этап оценивания компьютерной программы. Возможны улучшения и дополнения к заявленным условиям.
Плюсы и минусы Iterative model/Итеративной модели?
Плюсы
Быстрый выпуск продукта, хотя и с минимальными функциями;
Более гибкая подстройка продукта под новые запросы пользователей;
Раннее обнаружение дефектов – снижение затрат на их исправление;
Экономия ресурсов – не нужно разрабатывать невостребованные функции;
Возможность использовать накопленный опыт из предыдущих итераций.
Минусы 
Отсутствие понятных сразу бюджета и сроков разработки;
Исходную архитектуру продукта возможно, придется несколько раз существенно перерабатывать, чтобы обеспечить выпуск следующих итераций;
Нередко приходится в значительной мере переписывать решения, уже сделанные в предыдущих итерациях – например, для обеспечения масштабирования баз данных или выравнивания нагрузки на сервер.
Когда использовать Iterative model/Итеративной модели?


Использование подобной модели удобно для крупных проектов; – когда известны, по крайней мере, ключевые требования; – когда требования к проекту могут меняться в процессе разработки.
Agile - это? 
Agile - это подход к управлению проектами, предполагающий разбивку проекта на этапы, а также непрерывное сотрудничество и совершенствование. В рамках этого подхода команды следуют циклу планирования, выполнения и оценки.
Agile манифест - это? 
Agile манифест — ключевой документ, в котором перечислены фундаментальные идеи и положения методологии разработки программного обеспечения.


Ценности Agile
Люди и взаимодействие важнее процессов и инструментов.
Работающий продукт важнее исчерпывающей документации.
Сотрудничество с заказчиком важнее согласования условий контракта.
Готовность к изменениям важнее следования плану.
Основные принципы Agile манифест?
-Высшим приоритетом для нас является удовлетворение потребностей заказчика благодаря регулярной и ранней поставке ценного программного обеспечения.
-Изменение требований приветствуется, даже на поздних стадиях разработки. Agile-процессы позволяют использовать изменения для обеспечения заказчику конкурентного преимущества.
-Работающий продукт следует выпускать как можно чаще, с периодичностью от пары недель до пары месяцев.
-На протяжении всего проекта разработчики и представители бизнеса должны ежедневно работать вместе.
-Над проектом должны работать мотивированные профессионалы. Чтобы работа была сделана, создайте условия, обеспечьте поддержку и полностью доверьтесь им.
-Непосредственное общение является наиболее практичным и эффективным способом обмена информацией как с самой командой, так и внутри команды.
-Работающий продукт — основной показатель прогресса.
-Инвесторы, разработчики и пользователи должны иметь возможность поддерживать ритм бесконечно. Agile помогает наладить такой устойчивый процесс разработки.
-Постоянное внимание к техническому совершенству и качеству проектирования повышает гибкость проекта.
-Простота — искусство минимизации лишней работы — крайне необходима.
-Лучшие требования, архитектурные и технические решения рождаются у самоорганизующихся команд.
-Команда должна систематически анализировать возможные способы улучшения эффективности и соответственно корректировать стиль своей работы.
Scrum - это?  Scrum - это методика организации совместного рабочего процесса, в основе которой — поэтапная разработка и совершенствование продукта небольшой командой специалистов различного профиля. Скрам это набор принципов и инструментов, с помощью которых можно сделать работоспособный продукт в ограниченные по длительности итерации, которые называют спринтами. Как методология управления проектами, scrum предполагает, что самоорганизованная команда представляет законченный продукт в фиксированный временной отрезок (спринт).
Артефакты:
Бэклог продукта
Бэклог продукта – это динамический список функций, требований, усовершенствований и исправлений, которые должны быть выполнены для успеха проекта. По сути, это список дел команды, который постоянно пересматривается и изменяется в соответствии с приоритетами, чтобы адаптироваться к изменениям на рынке. Владелец продукта поддерживает и обновляет список, удаляя неактуальные пункты или добавляя новые запросы от клиентов.
Бэклог компонента Sprint
Бэклог компонента Sprint – это список элементов, которые команда разработчиков должна завершить в текущем цикле Sprint. Перед каждым циклом Sprint команда выбирает, над какими элементами из бэклога продукта она будет работать. Бэклог компонента Sprint является гибким и может изменяться в течение цикла Sprint.
Команде Scrum необходимы три конкретные роли: владелец продукта, лидер Scrum и команда разработчиков.
Владелец продукта
Владелец продукта фокусируется на том, чтобы команда разработчиков обеспечивала максимальную ценность для бизнеса. Они понимают меняющиеся потребности конечных пользователей и клиентов и расставляют приоритеты. Успешные владельцы продуктов делают следующее:
Предоставляют команде четкие указания о том, какие функции следует внедрять дальше.
Преодолевают разрыв между тем, что нужно компании и тем, что понимает команда.
Решают, когда и как часто должны происходить релизы.
Лидер Scrum
Лидеры Scrum – это чемпионы Scrum в своих командах. Они несут ответственность за эффективность работы команды Scrum. Они обучают команды, владельцев продуктов и компании, чтобы улучшить процессы Scrum и оптимизировать доставку. Лидеры Scrum также несут ответственность за выполнение указанных ниже действий.
 
Составление графика ресурсов, необходимых для каждого элемента Sprint.
Содействие в проведении других мероприятий Sprint и командных встреч.
Руководство цифровой трансформацией в команде.
Содействие в обучении команды при внедрении новых технологий.
Общение с внешними группами для решения любых проблем, с которыми может столкнуться команда в целом.
Команда разработчиков Scrum
Команда Scrum состоит из тестировщиков, дизайнеров, UX-специалистов, Ops-инженеров и разработчиков. Члены команды обладают различными навыками и проходят перекрестное обучение друг друга, поэтому ни один человек не становится узким местом в выполнении работы. 
Команды разработчиков Scrum выполняют указанное ниже.
Совместно работают над обеспечением успешного завершения Sprint.
Поддерживают практику устойчивого развития.
Самоорганизуются и подходят к своим проектам с очевидной позицией «мы».
Управляют планированием и оценкой того, какой объем работы они могут выполнить для каждого цикла Sprint.
Cобытия Scrum - это набор последовательных встреч, которые команды Scrum проводят регулярно. 
Планирование Sprint
В этом случае команда оценивает работу, которая должна быть завершена в следующем цикле Sprint. Участники определяют цели Sprint, которые являются конкретными, измеримыми и достижимыми. В конце встречи по планированию каждый член Scrum знает, как прирост может быть реализован в Sprint.
Sprint
Sprint – это фактический период, когда команда Scrum работает вместе над завершением прироста. Две недели – это типичная продолжительность цикла Sprint, но она может варьироваться в зависимости от потребностей проекта и команды. Чем сложнее работа и чем больше неизвестных, тем короче должен быть Sprint.
Ежедневное собрание Scrum или стенд-ап
Ежедневное собрание Scrum – это короткое собрание, на котором члены команды проверяют и планируют работу на день. Они отчитываются о проделанной работе и озвучивают любые трудности в достижении целей Sprint. Он называется стенд-ап, потому что его цель – сделать собрание максимально коротким, как когда все стоят.
Обзор Sprint
В конце Sprint команда собирается на неформальную сессию, чтобы проанализировать выполненную работу и представить ее заинтересованным сторонам. Владелец продукта может также переработать бэклог продукта на основе текущего цикла Sprint.
 Что такое ретроспектива  
Ретроспектива Sprint - Команда собирается вместе, чтобы задокументировать и обсудить, что получилось, а что не получилось во время цикла Sprint. Генерируемые идеи используются для улучшения будущих циклов Sprint.


Преимущества и недостатки Scrum
Преимущества Scrum:
команда работает короткими этапами, на каждом из которых определяет цели и пути их достижения, что ускоряет процесс работы;
команда работает над разными задачами проекта одновременно, что позволяет быстрее достичь желаемой цели;
большие задачи разделяют на мелкие, поэтому внести корректировки прямо в процессе работы намного проще, чем в каскадном подходе;
сокращается время на поиск ошибок и объяснение проблем;
минимизация финансовых рисков благодаря оперативной реакции на изменения и устранение ошибок;
каждый член команды четко знает свою задачу, следовательно, повышается уровень ответственности к работе;
присутствует открытый обмен информацией, что делает процесс работы максимально прозрачным;
поддержание высокого уровня мотивации в команде благодаря ежедневной видимости достижений.
Недостатки Scrum:
успех проекта во многом зависит от скрам-мастера (организатор процесса), квалификации команды и их приверженности своему делу;
далеко не всегда можно адаптировать метод скрам под сферу деятельности, поскольку есть проекты, требующие исключительно планового подхода в работе;
требует регулярной коммуникации с заказчиком, что порой тормозит процесс из-за невозможности получения обратной связи;
сложность внедрения в масштабных и сложных проектах, так как больше подходит для малых и средних.
Что такое Velocity / Capacity?

Velocity — это скорость, с которой Scrum-команда выполняет определенный обьем работ за один спринт.
Capacity- объем работы, который может быть выполнен в течение определенного периода времени, и основывается на количестве часов, имеющихся у человека или команды для выполнения этой работы.
	Kanban- это?
Kanban - это метод организации и управления задачами. Он основан на визуализации бизнес-процессов и поиске способов их улучшения для повышения эффективности почти в любой сфере. Канбан-метод содержит ряд управленческих практик (инструментов), которые можно применять вместе или по отдельности и оптимизировать рабочий процесс. В числе этих практик: визуализация задач интеллектуального труда на доске, ограничение количества незавершённой работы, управление потоком работ на основе метрик, создание явных правил работы, организация петель обратной связи для управления потоком работ и вовлечение всех уровней компании в оптимизацию рабочих процессов.
Преимущества и недостатки Kanban?

Плюсы Канбан-метода:
1. Визуализация работы. Использование доски Канбан позволяет командам легко видеть, какие задачи находятся в процессе выполнения, какие задачи ожидают выполнения, а какие задачи завершены. Такая визуализация помогает командам понять поток работы и выявить узкие места, которые затем можно устранить, чтобы улучшить выполнение задач.

 2. Гибкость. Канбан — это гибкий метод, который не предписывает определенный набор практик или ролей. Это позволяет командам постоянно совершенствовать свои рабочие процессы и вносить изменения по мере необходимости, что может привести к более эффективному и результативному предоставлению ценности клиенту.

 3. Ориентация на непрерывную постановку задач. Ориентация Канбан на непрерывное предоставление ценности означает, что команды могут работать над задачами по мере их поступления, а не ждать начала определенного спринта. Это может помочь обеспечить более быстрое и эффективное выполнение работы, а также более быстрое получение ценности клиентом.


4. Улучшенное сотрудничество. Использование визуальной доски и фокус на ограничении незавершенной работы может помочь командам более эффективно сотрудничать. Команды могут видеть, над какими задачами работают их коллеги, а это помогает сократить дублирование усилий и повысить общую эффективность.
Минусы Канбан:
1. Отсутствие структуры. Хотя гибкость Канбан может быть сильной стороной, она может быть и слабой стороной. Командам может быть трудно работать эффективно без определенного набора практик и ролей, что может привести к путанице и неэффективности.

2. Отсутствие временных рамок. Канбан не устанавливает конкретную продолжительность времени для работы, и это может затруднить эффективное планирование и расстановку приоритетов. Командам может быть трудно определить, когда задача завершена, и это может привести к задержкам и отсутствию прогресса.

3. Ограниченное количество ретроспектив спринта. Одним из ключевых преимуществ Scrum является ретроспектива спринта, которая позволяет командам проанализировать свою работу и определить области для улучшения. В Kanban нет аналогичного процесса, и это может затруднить командам постоянное совершенствование рабочих процессов.

4. Отсутствие расстановки приоритетов. Канбан не устанавливает конкретные приоритеты для работы, и это может затруднить для команд определение того, какая работа должна быть выполнена в первую очередь. Командам может быть трудно определить, какая работа является наиболее важной, что может привести к задержкам и отсутствию прогресса.
Что такое SDLS? Из каких этапов состоит? Что происходит на каждом этапе?


SDLC - это жизненный цикл разработки программного обеспечения,включающий:
 Анализ, составление требований к продукту.
Планирование.
Проектирование и дизайн
Разработка.
Тестирование.
Развертывание, эксплуатация.
Что такое STLS? Из каких этапов состоит? Что происходит на каждом этапе?



STLC - это жизненный цикл тестирования. Это последовательность действий, проводимых в процессе тестирования, с помощью которых гарантируется качество программного обеспечения и его соответствие требованиям.
Цикл состоит из шести основных этапов:
Анализ требований
Планирование тестирования
Создание тест-кейсов
Настройка тестового окружения
Выполнение тестирования
Завершение цикла тестирования

