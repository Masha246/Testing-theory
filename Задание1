1. Тестирование программного обеспечения это процесс исследования программного продукта с целью проверки соответствия реального поведения программы и ожидаемого.
2.Качество ПО это комплекс характеристик программного продукта, определяющих способность выполнять возложенные на него функции
3. Начинать тестирование желательно как можно раньше, например на этапе сбора требований.
3.1  Заканчивать тестирование можно когда:
*истекли сроки тестирования
*выполнены все запланированные тест-кейсы
*достигнут целевой показатель тестового покрытия
*исчерпан бюджет, выделенный на тестирование
*затраты на поиск  дефектов превышают потери от самих дефектов
*выявлено слишком много дефектов, что требует кардинальной переделки кода.
4. Цели тестирования ПО 
-Проверка, все ли указанные требования выполнены.
-Создание уверенности в уровне качества объекта тестирования.
-Предотвращение дефектов.Тестирование — не только поиск багов на уже реализованном продукте. Существует также тестирование на более ранних этапах, например, тестирование документации.
-Обнаружение отказов и дефектов.
-Предоставление заинтересованным лицам достаточной информации, позволяющей им принять обоснованные решения (особенно в отношении уровня качества объекта тестирования).
-Снижение уровня риска ненадлежащего качества программного обеспечения (например, пропущенные сбои в работе).
5. Quality Assurance - это совокупность мероприятий, охватывающих все технологические этапы разработки, выпуска и эксплуатации программного обеспечения, информационных систем, предпринимаемых на разных стадиях жизненного цикла ПО, для обеспечения требуемого уровня качества выпускаемого продукта.
6. Quality Control -это процесс, направленный на контроль и проверку качества продукта или услуги. В отличие от QA, QC сконцентрирован на конкретном этапе разработки или производства, когда продукт уже находится в конечной стадии или близок к ней. Цель QC состоит в том, чтобы проверить продукт на соответствие установленным стандартам качества и требованиям.
QC-специалисты: отвечают за конечное качество продукта; QA-специалисты: контролируют качество на всех циклах производства, начиная с этапа планирования. 
7. Тестирование - это проверка программного обеспечения, которая показывает, соответствует ли оно ожиданиям разработчиков и правильно ли работает. Это процесс, который помогает обнаружить ошибки и дефекты, улучшить качество продукта и выпустить его на рынок.
8. Принципы тестирования:
●Исчерпывающее тестирование невозможно (Насколько бы тщательным тестирование не было, нельзя учесть все возможные сценарии и предвидеть все возможные ошибки.)
●Тестирование демонстрирует наличие дефектов, а не их отсутствие(Тестирование может выявить тот момент, что ошибки присутствуют, но не может доказать в полной мере, что дефектов нет.)
●Заблуждение об отсутствии ошибок (Можно сколько угодно находить ошибки, и даже, казалось бы, не обнаруживая их больше, нет гарантии того, что ошибки найдены все и продукт полностью качественный и готовый.)
●Раннее тестирование сохраняет время и деньги (говорит о том, что чем раньше выявляется та или иная проблема – тем меньше средств и трудозатрат потребуется для её устранения)
●Принцип скопления или кластеризация дефектов (наибо́льшее количество дефектов обычно содержится в небольшо́м количестве модулей.)
●Тестирование зависит от контекста (по типу продукта – web, desktop, мобильное приложение, сервис и др.; по цели продукта – обеспечение безопасности, Game, продажа товаров и др.; по проектной команде – специализация, количество человек, опыт и т.д.; по доступным инструментам – что присутствует на проекте, для успешной реализации; по срокам – как построен рабочий процесс, как часто выходят релизы, время между ними на подготовку; по ожидаемому уровню качества – чем выше требования, тем тщательнее нужно тестировать)
●Парадокс пестицида (Если к какому-либо функционалу применять постоянно повторяющийся набор тестов – то эти проверки в скором времени будут неэффективны в нахождении новых дефектов.)
9. Верификация -это процесс просмотра документации, дизайна, кода и программы для того, чтобы проверить, было ли программное обеспечение создано в соответствии с требованиями или нет. Основная цель процесса верификации – обеспечить качество приложения, дизайна, архитектуры и т.д. Верификация не требует исполнения кода, Проверяется соответствие программного обеспечения спецификации.
10. Валидация - это тестирование и проверка того, действительно ли программный продукт соответствует точным потребностям заказчика или нет. Этот процесс помогает гарантировать, что ПО выполняет желаемое использование в подходящей среде. Процесс валидации включает в себя такие действия, как модульное тестирование, интеграционное тестирование, системное тестирование и пользовательское приемочное тестирование.Всегда связано с выполнением кода
11. Характеристики качества ПО
11.1 Функциональность:
Корректность (Correctness): Этот атрибут означает, насколько правильно программа выполняет заданные функции. Например, если программе поручено сортировать данные, корректность подразумевает, что она сортирует их правильно.
Целостность (Integrity): Целостность связана с защитой данных и функций программы от несанкционированных изменений. Если данные могут быть изменены только авторизованными пользователями, то это означает, что программа обладает высокой целостностью.
Интероперабельность (Interoperability): Этот атрибут оценивает способность программы взаимодействовать с другими системами и программами. Например, интероперабельность может быть важна, если программа должна обмениваться данными с другими приложениями.
Полнота (Completeness): Полнота означает способность программы предоставлять все функции, заявленные в требованиях. Это означает, что программа не должна иметь недостающих функций.
11.2. Надежность:
Доступность (Availability): Этот атрибут измеряет время, в течение которого система доступна для использования. Надежная система должна иметь высокую доступность, чтобы минимизировать простои.
Устойчивость (Fault Tolerance): Устойчивость оценивает способность программы работать надежно, даже если возникают сбои или ошибки. Надежные программы могут продолжать функционировать, даже если произошел сбой.
Предсказуемость (Predictability): Надежная система должна предсказуемо вести себя в различных ситуациях, что важно для пользователей и операторов системы.
11.3 Эффективность:
Эффективность использования ресурсов (Resource Utilization): Этот атрибут оценивает, насколько эффективно программа использует ресурсы, такие как память, процессорное время и сетевая пропускная способность. Высокая эффективность обеспечивает оптимальное использование ресурсов.
Время отклика (Response Time): Время отклика измеряет, сколько времени требуется программе для реагирования на запросы пользователя. Снижение времени отклика повышает удовлетворенность пользователей.
Пропускная способность (Throughput): Пропускная способность определяет, сколько операций программа может обработать за единицу времени. Высокая пропускная способность важна для приложений с большой нагрузкой.
11.4 Безопасность:
Конфиденциальность (Confidentiality): Этот атрибут оценивает способность программы защищать конфиденциальные данные от несанкционированного доступа. Высокая конфиденциальность важна для систем, которые обрабатывают чувствительные данные.
Целостность (Integrity): Способность программы обеспечивать целостность данных и защищать их от несанкционированных изменений. Например, если данные не должны быть подвергнуты изменениям без авторизации, целостность играет важную роль.
Доступность (Availability): Этот атрибут определяет способность программы оставаться доступной даже при атаках или сбоях. Надежные системы должны быть доступными для пользователей даже в условиях неполадок.
11.5 Удобство использования:
Понимаемость (Understandability): Понимаемость оценивает, насколько легко пользователи могут понять, как использовать программу. Простой и понятный интерфейс повышает удобство использования.
Простота обучения (Learnability): Этот атрибут связан с легкостью освоения программы новыми пользователями. Чем быстрее пользователи могут освоить программу, тем лучше.
Ориентация на пользователя (User-Centered Design): Удовлетворение потребностей и ожиданий пользователей является ключевой составляющей удобства использования.
11.6 Поддерживаемость и сопровождаемость:
Модульность (Modularity): Модульность оценивает способность программы быть разбитой на отдельные модули, что облегчает сопровождение и поддержку. Модульные системы позволяют быстрее вносить изменения и устранять ошибки.
Изменяемость (Changeability): Изменяемость определяет, насколько легко программа может подвергаться изменениям без существенных нарушений работы. Поддерживаемость связана с управлением изменениями в программе.
Документация (Documentation): Наличие подробной и актуальной документации для пользователей и разработчиков оказывает значительное влияние на поддерживаемость и сопровождаемость программы.
11.7 Совместимость:
Совместимость с платформами (Platform Compatibility): Этот атрибут оценивает способность программы работать на различных операционных системах и аппаратных платформах. Совместимость важна для программ, предназначенных для разных сред.
Совместимость с браузерами (Browser Compatibility): Совместимость с разными веб-браузерами важна для веб-приложений, чтобы они корректно отображались и функционировали в разных браузерах.
Совместимость с операционными системами (Operating System Compatibility): Этот атрибут оценивает способность программы работать на разных версиях операционных систем, что важно для пользователей с разными ОС.
